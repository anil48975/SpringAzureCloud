Going Cloud-Native with Spring Cloud Azure:

https://www.youtube.com/watch?v=dPyMdI_siPU
_______________________________________________________________________________________________________________________

Need to add follwoing dependencies in eureka and image-storage application
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>


Computer Vision Cognitive Service:
https://docs.microsoft.com/en-us/azure/cognitive-services/Computer-vision/quickstarts-sdk/client-library?pivots=programming-language-java&tabs=visual-studio
_______________________________________________________________________________________________________________________

[[49:01]] References:

Quickstart: Deploy your first Azure Spring Cloud application 

https://docs.microsoft.com/en-us/azure/spring-cloud/spring-cloud-quickstart?tabs=Azure-CLI&pivots=programming-language-java

https://github.com/Microsoft/spring-cloud-azure

https://github.com/Microsoft/azure-spring-boot 

moved to azure-sdk-for-java
https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/spring

Spring Cloud Azure Playground:
https://aka.ms/springcloud
https://azure-spring-cloud.azurewebsites.net/

Java Developer Center:
https://docs.microsoft.com/en-us/azure/developer/java/?view=azure-java-stable

Azure Dev spaces:
https://docs.microsoft.com/en-us/azure/dev-spaces/
_______________________________________________________________________________________________________________________

cloud-config-server for configuration,
cloud-eureka-server for service registry,
cloud-gateway is atomatically generated by spring-azure starer.

Agenda: [Figure_01]
	- Cloud Native with Spring
	- Spring Cloud Azure
		- Spring Cloud Stream with event Hub
		- Spring Resources with Azure Storage
		- Spring Caching with Azure Redis Cache
		- Spring Cloud Azure Playground
	
	- Demo - Photo Gallery
	- Spring Developer Experience on Azure
	- Java on Azure Reference
	
Cloud Native: [Figure_02]
	- Microservices
	- Containers
	- Orchestration
	- Cloud computing [leveraging cloud services]

Spring Cloud
	- Patterns of best practice
	
((2:14)) Spring Cloud Azure [Figure_03] => extends the boundary of Spring Cloud

[[2:41]] Spring cloud azure requires an authentication file, it uses when it talks to azure management API,
         it means, it take cares of auto configuration for you. 
	
[[3:17]] But recommendation is to provision the resource beforehand

[[4:14]] Spring Cloud Stream with Azure Event Hub [Figure_04]
         Cloud Stream Binder with KAFKA API

[[5:15]] Spring Resources with Azure Storage [File, BLob, Table, Queue]

[[5:58]] Spring Caching with Azure Redis Cache
         A request with same parameters and same values will get already cached value
		
[[6:56]] Spring Cloud Azure Playground

https://aka.ms/springcloud
https://azure-spring-cloud.azurewebsites.net/

[[7:01]] 2 options after creating a project:
			- either get started with one command to run it locally in a container environment, it provides predefined script for that
			- other option is to pull/push the project to github as the begining of your devops pipeline

((7:41)) Photo Gallery - Demo [Project Architecture image] [Figure_06]
	Steps:
		1. Quick start project with "Playground"
		2. [image storage project]read/write blob storage in "Producer"
		3. Send notification event to EH[Event Hub] in "Producer"
		4. receive and process event in "Consumer"
		5. [image analysis project]Analyse images with cognitive service and cache the results
		

[[10:00]] Quick start project with "Playground"	
https://azure-spring-cloud.azurewebsites.net/
Go to Azure dashboard [https://portal.azure.com/] => Azure services => Azure Spring Cloud

((11:00)) setup metadata [project name, artifact, port number etc..], select service name
          select azure services
		  Push to Github
		  Download and import the project in idea IDE
((13:14)) azure cloud generates a maven project + docker metadata also

[[14:00]] in spring cloud project all the application properties are supposed to be stored in cloud-config-server module

((15:20)) setting up application properties

[[16:25]] you can use different authentication file for each microservice

((16:40)) generating azure authentication file
          https://github.com/microsoft/spring-cloud-azure
		  
		  
		  https://github.com/microsoft/spring-cloud-azure/tree/1.2.7 [not in master, it is in tag 1.2.7]
		  
		  https://github.com/Microsoft/spring-cloud-azure/tree/release/1.1.0.RC5/spring-cloud-azure-samples/eventhubs-binder-sample
			=> Credential file based usage
			
		Install Azure CLI, download from here:
		https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?view=azure-cli-latest&tabs=azure-cli
		
		Once Azure CLI is installed, run login command from command prompt
		az login
		
		message in console: You have logged in. Now let us find all the subscriptions to which you have access...
_______________________________________________________________________________________________________________________

Create Azure credential file. Please see how to create credential file

$  az login

az login --tenant TENANT_ID

$  az account set --subscription <name or id>
$  az ad sp create-for-rbac --sdk-auth > my.azureauth

Make sure my.azureauth is encoded with UTF-8.

Put credential file under src/main/resources/.


https://docs.microsoft.com/azure/azure-resource-manager/resource-group-create-service-principal-portal

Azure Active Directory => User settings => [Permission for app registration]

Azure Active Directory => App registrations => + New Registration

_______________________________________________________________________________________________________________________	   

[[17:01]] controlling access to resources using different credential files, all credential files reside in cloud-config-server

((19:27)) declaring cache and storage information in application properties setting

[[23:01]] ResourceLoader autowiring, 

[[26:24]] NotificationSender

[[27:34]] Send a notification that sends loction of the blob

[[29:25]] define some RestCOntroller to send a request

[[30:04]] Rest controller with /upload and get end points

[[30:20]] upload stores image in blob and sends notification

[[30:40]] image location is blob container in azure container resource [Figure_07]

[[31:40]] first start config server as rest of the microservices get configuration information from that

[[31:59]] then start eureka-server then application gateway server

[[33:01]] accessing gateway from browser => check all the services are up and running

[[34:00]] upload a orange image and check in blob storage

[[35:20]] accessing orange image coming from azure blob, not from local machine

[[36:01]] consuming the event

[[40:00]] ImageAnalysisService implementation
Computer Vision Cognitive Service:
https://docs.microsoft.com/en-us/azure/cognitive-services/Computer-vision/quickstarts-sdk/client-library?pivots=programming-language-java&tabs=visual-studio


_________________________________________________________________________________________________________________________________________________________

Cognitive Media Service

Step 1. Go to Spring azure cloud starter
https://azure-spring-cloud.azurewebsites.net/

Create Cognitive Media Service with, image-storage and image-analysis service
open the project in IntelliJ

Docker folder for docker and kubernates configuration

Add startup applications for Eureka, Gateway, Config, ImageStorage and ImageAnalysis

___________________________________________________________________

Step 2.
		Install Azure CLI, download from here:
		https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?view=azure-cli-latest&tabs=azure-cli
open azure CLI
create credential file:
$  az login

az login --tenant TENANT_ID

$  az account set --subscription <name or id>

$  az ad sp create-for-rbac --sdk-auth > cms.azureauth

___________________________________________________________________

Step 3.
keep auth file in bothe services' resources folder
provide details in storage and analysis config files in config server - shared resources

add jaxb dependencies:
<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>
		
run all the servers
access Gateway server:
http://localhost:9999/

___________________________________________________________________

Step 4:
	Code changes for image-storage service
	
	restart image-storage
	upload image
		http://localhost:8080/upload
			body
			form-data
			key as image: value as file
	check in azure portal => storage => blob storage => containers
	
	accessing the image url:
	http://localhost:8080/images/image_02_original.jpg
___________________________________________________________________

Step 5:
    Code changes for image-analysis
	
	create a compputer vision resource in azure portal
	take api key and endpoint from key and endpoint in azure portal
	 
	add computer vision dependency in image analysis:
	<dependency>
			<groupId>com.microsoft.azure.cognitiveservices</groupId>
			<artifactId>azure-cognitiveservices-computervision</artifactId>
			<version>1.0.4-beta</version>
		</dependency>
		
